"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright: Ankitects Pty Ltd and contributors
License: GNU AGPL, version 3 or later; http://www.gnu.org/licenses/agpl.html
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class SetTagCollapsedRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    COLLAPSED_FIELD_NUMBER: builtins.int
    name: builtins.str
    collapsed: builtins.bool
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        collapsed: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["collapsed", b"collapsed", "name", b"name"]) -> None: ...

global___SetTagCollapsedRequest = SetTagCollapsedRequest

@typing_extensions.final
class TagTreeNode(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    CHILDREN_FIELD_NUMBER: builtins.int
    LEVEL_FIELD_NUMBER: builtins.int
    COLLAPSED_FIELD_NUMBER: builtins.int
    name: builtins.str
    @property
    def children(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TagTreeNode]: ...
    level: builtins.int
    collapsed: builtins.bool
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        children: collections.abc.Iterable[global___TagTreeNode] | None = ...,
        level: builtins.int = ...,
        collapsed: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["children", b"children", "collapsed", b"collapsed", "level", b"level", "name", b"name"]) -> None: ...

global___TagTreeNode = TagTreeNode

@typing_extensions.final
class ReparentTagsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TAGS_FIELD_NUMBER: builtins.int
    NEW_PARENT_FIELD_NUMBER: builtins.int
    @property
    def tags(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    new_parent: builtins.str
    def __init__(
        self,
        *,
        tags: collections.abc.Iterable[builtins.str] | None = ...,
        new_parent: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["new_parent", b"new_parent", "tags", b"tags"]) -> None: ...

global___ReparentTagsRequest = ReparentTagsRequest

@typing_extensions.final
class RenameTagsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CURRENT_PREFIX_FIELD_NUMBER: builtins.int
    NEW_PREFIX_FIELD_NUMBER: builtins.int
    current_prefix: builtins.str
    new_prefix: builtins.str
    def __init__(
        self,
        *,
        current_prefix: builtins.str = ...,
        new_prefix: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["current_prefix", b"current_prefix", "new_prefix", b"new_prefix"]) -> None: ...

global___RenameTagsRequest = RenameTagsRequest

@typing_extensions.final
class NoteIdsAndTagsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NOTE_IDS_FIELD_NUMBER: builtins.int
    TAGS_FIELD_NUMBER: builtins.int
    @property
    def note_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    tags: builtins.str
    def __init__(
        self,
        *,
        note_ids: collections.abc.Iterable[builtins.int] | None = ...,
        tags: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["note_ids", b"note_ids", "tags", b"tags"]) -> None: ...

global___NoteIdsAndTagsRequest = NoteIdsAndTagsRequest

@typing_extensions.final
class FindAndReplaceTagRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NOTE_IDS_FIELD_NUMBER: builtins.int
    SEARCH_FIELD_NUMBER: builtins.int
    REPLACEMENT_FIELD_NUMBER: builtins.int
    REGEX_FIELD_NUMBER: builtins.int
    MATCH_CASE_FIELD_NUMBER: builtins.int
    @property
    def note_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    search: builtins.str
    replacement: builtins.str
    regex: builtins.bool
    match_case: builtins.bool
    def __init__(
        self,
        *,
        note_ids: collections.abc.Iterable[builtins.int] | None = ...,
        search: builtins.str = ...,
        replacement: builtins.str = ...,
        regex: builtins.bool = ...,
        match_case: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["match_case", b"match_case", "note_ids", b"note_ids", "regex", b"regex", "replacement", b"replacement", "search", b"search"]) -> None: ...

global___FindAndReplaceTagRequest = FindAndReplaceTagRequest

@typing_extensions.final
class CompleteTagRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INPUT_FIELD_NUMBER: builtins.int
    MATCH_LIMIT_FIELD_NUMBER: builtins.int
    input: builtins.str
    """a partial tag, optionally delimited with ::"""
    match_limit: builtins.int
    def __init__(
        self,
        *,
        input: builtins.str = ...,
        match_limit: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["input", b"input", "match_limit", b"match_limit"]) -> None: ...

global___CompleteTagRequest = CompleteTagRequest

@typing_extensions.final
class CompleteTagResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TAGS_FIELD_NUMBER: builtins.int
    @property
    def tags(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        tags: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["tags", b"tags"]) -> None: ...

global___CompleteTagResponse = CompleteTagResponse
